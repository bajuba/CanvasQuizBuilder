Unit 1 Practice
description~Complete the following practice exercises to help cement your understanding of basic programming principles
attempts~4
shuffle~false
###
01. Variables
###
multiselect~1
###
Declare a variable called name:
[1] name;
###
1~let~ ~Declare~Let~Define
###
###
02. Variables
###
multiselect~1
###
Declare a variable called name and assign it an appropriate value:
[1] name [2] [3];
###
1~let~ ~Declare~Let~Define
2~=~>>~==~=>
3~"Bob Johnson"~Bob Johnson~"Bob Johnson~23
###
###
03. Variables Vs Literal
###
multichoice~1
###
The following is a string variable:
"I am a string"
###
1~False~True
###
###
04. Variables Vs Literal
###
multichoice~1
###
The following is likely a variable:
name
###
1~True~False
###
###
05. Variables
###
multiselect~1
###
Declare a variable called age and assign it an appropriate value:
[1] age [2] [3]
###
1~let~ ~Declare~Let~Define
2~=~>>~==~=>
3~23;~"23";~twenty-three;~23
###
###
06. Variables
###
multiselect~1
###
Declare a variable called interestRate and assign it an appropriate value:
[1] interestRate [2] [3]
###
1~let~ ~Declare~Let~Define
2~=~>>~==~=>
3~.05;~".05";~05~"Bob Johnson";
###
###
07. Variables
###
multiselect~1
###
Match the value with the correct datatype:
[1] is an integer
[2] is a string
[3] is a float
###
1~4902~23.06~"Bob Johnson"~1,920
2~"Bob Johnson"~4902~23.06~1,920
3~23.06~4902~"Bob Johnson"~1,920
###
###
08. Numerical Operators
###
multiselect~1
###
Match the appropriate operators to make the statements true:
1 [1] 1 = 2
1 [2] 1 = 0
3 [3] 3 = 1
2 [4] 1 = 3
4 [5] 1 = 4
###
1~+~/~-~*
2~-~/~+~*
3~/~*~-~+
4~+~/~-~*
5~*~/~-~+
###
###
09. Numerical Operators
###
multiselect~1
###
Match the appropriate operators to make the statements true:
200 [1] 4 = 800
90 [2] 50 = 40
50 [3] 10 = 500
90 [4] 30 = 3
150 [5] 150 = 300
###
1~*~/~-~+
2~-~/~+~*
3~*~/~-~+
4~/~+~-~*
5~+~/~-~*
###
###
10. String Operators
###
multiselect~1
###
Indicate whether the following statements would be true or false:
"Bob Johnson" - "son" = "Bob John" [1]
"Bob Johnson" + "son" = "Bob Johnsonson" [2]
"Bob Johnson" / "son" = "Bob John" [3]
"Bob Johnson" * "son" = "Bobson Johnsonson" [4]
###
1~False~True
2~True~False
3~False~True
4~False~True
###
###
11. String Operators
###
multiselect~1
###
What would the following produce?:
"dinosaur" + "jones" = [1]
"dinosaur" - "saur" = [2]
"dinosaur" + "jones" + "jr" = [3]
("dinosaur" + "jones") / "s" = [4]
("dinosaur" + "jones") * "jr"  = [5]
###
1~"dinosaurjones"~"dinosaur jones"~NaN~"dinosaur+jones"
2~NaN~"dino"~"dino-saur"~dino
3~"dinosaurjonesjr"~"dinosaur jones jr"~NaN~"dinosaur+jones+jr"
4~NaN~"dinoaur jone"~"dinosaur/sjones/s"~"dinosaur jones"
5~NaN~"dinosaurjrjonesjr"~"dinosaurjr jonesjr"~"dinosaurjonesjrjr"
###
###
12. String Concatenation
###
multiselect~1
###
What would the following produce?:
"1" + "1" = [1] 
"20" + "40" = [2]
4 + "10" = [3]
"Bob" + 30 = [4]
16 + "Bob" = [5]
###
1~"11"~2~"1+1"~NaN
2~"2040"~"20+40"~60~NaN
3~"410"~14~NaN~"14"
4~"Bob30"~"Bob 30"~NaN~"Bob+30"
5~"16Bob"~NaN~"16+Bob"~"16 Bob"
###
###
13. Output
###
multiselect~1
###
Display a greeting to the world:
[1]
###
1~console.log("Hello, world");~window.write("Hello, world");~display("Hello, world");~output("Hello, world");
###
###
14. Output
###
multiselect~1
###
Assume a variable called name with a value of "Bob Johnson". Display a greeting using this variable:
[1]([2]);
###
1~console.log~window.write~display~Output
2~"Hello, " + name~"Hello, name"~"Hello, Bob Johnson"~"Hello, "name
###
###
15. Input
###
multiselect~1
###
Retrieve a value from the user:
[1]("Please enter your name");
###
1~prompt~input~get~retrieve
###
###
16. Input
###
multiselect~1
###
Assume a variable called name which has no initial value. Assign a value to name from the user:
name [1] [2]("Please enter your name");
###
1~=~>>~==~=>
2~prompt~get~retrieve~input
###
###
17. Casting
###
multiselect~1
###
Assume a variable called age with a value of "23". What will age be in 10 years?:
ageInTenYears [1] [2]
###
1~=~>>~==~=>
2~parseInt(age) + 10;~Int32.convert(age) + 10;~age + 10;~int(age) + 10;
###
###
18. Casting
###
multiselect~1
###
Assume a variable called interestRate with a value of ".05". Double the interest rate:
interestDoubled [1] [2]
###
1~=~>>~==~=>
2~parseFloat(interestRate) * 2;~Float.convert(interestRate) * 2;~interestRate * 2;~float(interestRate) * 2;
###
###
19. Casting
###
multiselect~1
###
Declare a variable called age and assign it an appropriately typed value retrieved from the user:
[1] age [2] [3]([4]("Please enter your age));
###
1~let~ ~Declare~Let~Define
2~=~>>~==~=>
3~parseInt~Int32.convert~parseFloat~int
4~prompt~get~retrieve~input
###
###
20. Casting
###
multiselect~1
###
Declare a variable called interestRate and assign it an appropriately typed value retrieved from the user:
[1] interestRate [2] [3]([4]("Please enter the interest rate));
###
1~let~ ~Declare~Let~Define
2~=~>>~==~=>
3~parseFloat~Int32.convert~parseInt~float
4~prompt~get~retrieve~input
###
###
21. Formatting
###
multiselect~1
###
Declare a variable called accountBalance and assign it a decimal value retrieved from the user. Display this value with only 2 decimal points:
[1] accountBalance [2] [3]([4]("Please enter your account balance));
[5]("Your balance is " + [6]);
###
1~let~ ~Declare~Let~Define
2~=~>>~==~=>
3~parseFloat~Int32.convert~parseInt~float
4~prompt~get~retrieve~input
5~console.log~window.write~display~Output
6~accountBalance.toFixed(2)~format(accountBalance, 2)~parseFloat(accountBalance, 2)~accountBalance.format(2)
###
###
22. Comprehensive
###
multiselect~1
###
Declare a variable called name and assign it a value retrieved from the user. Declare a variable called age and assign it an appropriately typed value retrieved from the user. Display a message greeting the user and letting them know how old they will be in ten years:
[1] name [2] [3]("Please enter your name");
[4] age [5] [6]("Please enter your age));
[7]([8]);
[9]([10]);
###
1~let~ ~Declare~Let~Define
2~=~>>~==~=>
3~prompt~get~retrieve~input
4~let~ ~Declare~Let~Define
5~=~>>~==~=>
6~prompt~get~retrieve~input
7~console.log~window.write~display~Output
8~"Hello, " + name~"Hello, name"~"Hello, Bob Johnson"~"Hello, " name
9~console.log~window.write~display~Output
10~"In ten years you will be " + (parseInt(age) + 10)~"In ten years you will be " + age + 10~"In ten years you will be " age + 10~"In ten years you will be 33" 
###
######
Unit 1 - Exercise 1
attempts~2
scoring~keep_latest
###
01. Morning Buzz Coffee
###
multiblank~20
###
Employees at Morning Buzz Coffee Shop have been told they’ll get a bonus if they bring in enough pounds of recyclable newspapers. They want a program to calculate the amount they need to bring in each day to make this total, based on the total number of pounds to be collected and the number of days they’ll be bringing in newspapers. The program should ask for these amounts and calculate how many pounds they need to bring in each day to make the total in that number of days. They plan to run the program several times until they can find a number of pounds per day that seems reasonable. Write a Javascript program to accomplish this goal.
[1] total = [2]("How many pounds of newspaper do you hope to bring in?");
[3] days = [4]("How many days do you have to bring in newspaper?");
total = [5](total);
days = [6](days);
[7] numberPerDay = [8];
[9]("You will need to bring in " + [10] + " papers each day in order to reach your goal of " + [11] + " in " + [12] + " days");

Expected Output:
>>You will need to bring in 16.666666666666668 papers in order to reach your goal of 100 in 6 days
###
1~let~var
2~prompt
3~let~var
4~prompt
5~parseInt
6~parseInt
7~let~var~const
8~total / days
9~console.log
10~numberPerDay
11~total
12~days
###
Check out a working example of this exercise:
Exercise 1-1~https://repl.it/@jmunger/CIS-156-Exercise-1-1-juqon
######
Unit 1 - Exercise 2
###
02. Brianna Watt
###
multiblank~20
###
Brianna Watt, a consultant doing business as Watt Gives, wants a program to create an invoice for consulting services. Normally, she works on a project for three days before sending an invoice. She writes down the number of hours worked on each day and needs a program that asks for these amounts, totals them, and multiplies the amount by her standard rate of $30 per hour. The invoice should include Brianna’s business name, the client’s business name, the total number of hours worked, the rate, and the total amount billed. The information will be displayed onscreen.
[1] clientName = [2]("Enter client's name");
[3] businessName = [4]
[5] rate = [6]
[7] day1 = [8]([9]("Hours worked on day 1"));
[10] day2 = [11]([12]("Hours worked on day 2"));
[13] day3 = [14]([15]("Hours worked on day 3"));
[16] totalHours = [17
[18] totalCharge = [19]
[20]("Brianna Watt DBA " + [21]);
[22]("Invoice for " + [23]);
[24]("Hours: " + [25]);
[26]("Rate: " + [27]);
[28]("Total: " + [29]);

Expected Output:
>>Brianna Watt DBA Watt Gives
>>Invoice for Grunge Inc.
>>Hours: 20
>>Rate: 30
>>Total: 600
###
1~let~var~const
2~prompt
3~let~var~const
4~"Watt Gives";
5~let~var~const
6~30;
7~let~var~const
8~parseInt
9~prompt
10~let~var~const
11~parseInt
12~prompt
13~let~var~const
14~parseInt
15~prompt
16~let~var~const
17~day1 + day2 + day3~day1 + day3 + day2~day2 + day1 + day3~day2 + day3 + day1~day3 + day1 + day2~day3 + day2 + day1
18~let~var~const
19~totalHours * rate;~rate * totalHours;
20~console.log
21~businessName
22~console.log
23~clientName
24~console.log
25~totalHours
26~console.log
27~rate
28~console.log
29~totalCharge
###
Check out a working example of this exercise:
Exercise 1-2~https://repl.it/@jmunger/CIS-156-Exercise-1-2-huetos
######
Unit 1 - Exercise 3
attempts~40
shuffle~yes
###
03. Zach Stern
###
multiblank~20
###
Zach Stern, a floor tiler doing business as Zach Stern’s Tile, needs to know the area of any rectangular floor he’s tiling. He wants a program that asks for the room’s length and width and the cost per square foot of tile. The program should calculate and display the room’s area in square feet and the cost of the tile needed to cover the room.
[1] length = [2]([3]("Enter length of room"));
[4] width = [5]([6]("Enter width of room"));
[7] costPerSqFt = [8]([9]("Enter cost per square foot"));
[10] sqFeet = [11]
[12] totalCost = [13]
[14]("The room is " + [15] + " square feet.\nAt " + [16] + " per sq.ft., It will cost " + [17] + " to tile it.");

Expected Output:
>>The room is 300 square feet.
>>At 25 per sq.ft., It will cost 7500 to tile it.
###
1~let~var~const
2~parseInt
3~prompt
4~let~var~const
5~parseInt
6~prompt
7~let~var~const
8~parseInt
9~prompt
10~let~var~const
11~length * width;~width * length;
12~let~var~const
13~sqFeet * costPerSqFt;~costPerSqFt * sqFeet;
14~console.log
15~sqFeet
16~costPerSqFt
17~totalCost
###
Check out a working example of this exercise:
Exercise 1-3~https://repl.it/@jmunger/CIS-156-Exercise-1-3-kixnu
######
Unit 1 - Exercise 4
attempts~7
cant_go_back~true
show_correct~true
###
04. Metric Conversion
###
multiblank~20
###
Justin Kace is promoting the metric system and wants people to be able to convert miles to kilometers and kilometers to miles. You are to develop a program that asks the user for a number of miles and converts miles to kilometers (multiplying miles by 1.609), and then asks for a number of kilometers and coverts kilometers to miles (multiplying kilometers by 0.6214).
[1] miles = [2]([3]("Enter a number of miles"));
[4] kilometersConverted = [5]
[6] kilometers = [7]([8]("Enter a number of kilometers"));
[9] milesConverted = [10]
[11]([12] + " miles is " + [13] + " kilometers");
[14]([15] + " kilometers is " + [16] + " miles");

Expected Output:
>>50 miles is 80.45 kilometers
>>50 kilometers is 31.069999999999997 miles
###
1~let~var~const
2~parseInt
3~prompt
4~let~var~const
5~miles * 1.609;~1.609 * miles;
6~let~var~const
7~parseInt
8~prompt
9~let~var~const
10~kilometers * .6214;~kilometers * 0.6214;~.6214 * kilometers;~0.6214 * kilometers;
11~console.log
12~miles
13~kilometersConverted
14~console.log
15~kilometers
16~milesConverted
###
Check out a working example of this exercise:
Exercise 1-4~https://repl.it/@jmunger/CIS-156-Exercise-1-4-opbew
######
Unit 2 Practice
attempts~-1
lockdown~true
###
01. Boolean Operators
###
multiselect~1
###
Make the following statements true by inserting the correct boolean operator:
5 [1] 5
6 [2] 9
12 [3] 8
6 [4] -6
###
1~==~>~<~=~!=
2~<~>~==~=
3~>~<~=~==
4~!=~<~<=~==~=
###
###
02. Boolean Operators
###
multiselect~1
###
Make the following statements true by inserting the correct boolean operator:
10 [1] 3
1 [2] 36
4 [3] 5
12 [4] 12
###
1~>=~<=~<~=~==
2~<=~>~==~=~>=
3~!=~>~>=~==~=
4~>=~<~=~==~>~!=
###
###
03. Conditional Statements
###
multiselect~1
###
Write a conditional statement to test whether the two values are equal:
[1](value1 [2] value2) {}
###
1~if~condition~case~switch
2~==~>=~=~<=
###
###
04. Conditional Statements
###
multiselect~1
###
Write a conditional statement to test whether value1 is larger than value2:
[1](value1 [2] value2) {}
###
1~if~condition~case~switch
2~>~>=~=~<=~==~!=
###
###
05. Nested Conditional Statements
###
multiselect~1
###
Write a conditional statement to test whether value1 is larger than value2. If it is, test whether it is smaller than value3. If so, explain value1's relationship to the other two variables:
[1](value1 [2] value2) {
    [3]([4] [5] value3) {
        console.log([6]);
    }
}
###
1~if~condition~case~switch
2~>~>=~=~<=~==~!=
3~if~condition~case~switch
4~value1~value2~value3~value4
5~<~>~==~=~>=
6~"value1 is greater than value2 but less than value3"~"value1 is greater than value2 and value3"~"value1 is less than both value2 and value3"~"value1 is greater than value2 and equal to value3"
###
###
06. Else Statements
###
multiselect~1
###
Write a conditional statement to test whether value1 is at least as large as value2. If this isn't the case, explain what we can understand about the relationship between the two values:
[1](value1 [2] value2) {

} [3] {
    console.log([4]);
}
###
1~if~condition~case~switch
2~>=~>~=~<=~==
3~else~then~condition~case~if
4~"value1 is less than value2"~"value1 may be equal to or less than value2"~"value1 is greater than value 2"~"value1 is equal to value2"
###
###
07. Else If Statements
###
multiselect~1
###
Write a conditional statement to test whether value1 is as large as or larger than value2. Only if this is NOT the case, test whether value1 is smaller than value3. In the case that value1 is smaller than value3, explain what we can understand about the relationship between the values:
[1](value1 [2] value2) {

} [3]([4] [5] value3) {
    console.log([6]);
}
###
1~if~condition~case~switch
2~>=~>~=~<~==
3~else if~then if~else~case~if
4~value1~value2~value3~value4
5~<~>~==~=~>=
6~"value1 is the smallest of the three values"~"We can make no assertions about the values"~"value3 is greater than value 2"~"value1 is equal to value2"
###
###
08. Switch Statements
###
multiselect~1
###
Assume a variable called selection with the value of 2. Write a conditional structure to accomplish the following: On selection 1, display a message saying the color is yellow. On selection 2, display a message saying the color is blue. On selection 3, display a message saying the color is red. If selection is not 1, 2, or 3, display a message saying the selection was invalid:
[1]([2]) {
    [3] 3:
        console.log([4]);
        [5]
    [6] 2:
        console.log([7]);
        [8]
    [9] 1:
        console.log([10]);
        [11]
    [12]:
        console.log([13]);
}
###
1~switch~condition~case~if
2~selection~condition~variable~age
3~case~switch~condition~if
4~"The color is red"~"The color is green"~"The color is yellow"~"The color is blue"~"Invalid selection"
5~break;~end;~}~continue;
6~case~switch~condition~if
7~"The color is blue"~"The color is green"~"The color is yellow"~"The color is red"~"Invalid selection"
8~break;~end;~}~continue;
9~case~switch~condition~if
10~"The color is yellow"~"The color is green"~"The color is red"~"The color is blue"~"Invalid selection"
11~break;~end;~}~continue;~else
12~default~if~else~else if(selection < 1)
13~"Invalid selection"~"The color is green"~"The color is red"~"The color is blue"
###
######
Unit 2 - Exercise 1
attempts~4
shuffle~false
###
01. Guessing Game
###
multiblank~20
###
Write a program that will allow the user to guess a number between 1 and 10. The program will set a variable to the number to be guessed. It will then ask the user to enter a number and display whether the guess was too high, too low, or correct.
let number = 6;
let guess = prompt("Guess a number between 1 and 10");

[1] ([2]) {
  console.log("Too high");
}
[3] ([4]) {
  console.log("You got it!");
}
[5] ([6]) {
  console.log("Too low");
}
###
1~if
2~guess > number~number < guess
3~if
4~guess == number~number == guess
5~if
6~guess < number~number > guess
###
Check out a working example of this exercise:
Exercise 2-1~https://repl.it/@jmunger/CIS-156-Exercise-2-1-fusnae
######
Unit 2 - Exercise 2
attempts~15
lockdown~true
###
02. Greeting By Hour
###
multiblank~20
###
Write a program that asks the user for the hour in a 24hr format. Greet the user for the morning, afternoon, or evening, depending on whether the hour is or later than 6, 12, or 18 respectively. If the hour isn't within these ranges, with the user a good day
let hour = prompt("Enter the hour in military time (1-24)");

[1] {
  console.log("Good evening");
} [2] {
  console.log("Good afternoon");
} [3] {
  console.log("Good morning");
} [4] {
  console.log("Good day");
}
###
1~if (hour >= 18)~if(hour >= 18)
2~else if (hour >= 12)~else if(hour >= 12)
3~else if (hour >= 6)~else if(hour >= 6)
4~else
###
Check out a working example of this exercise:
Exercise 2-2~https://repl.it/@jmunger/CIS-156-Exercise-2-2-jsned
######
Unit 2 - Exercise 3
###
03. Star Sign
###
multiblank~20
###
Write a program that asks the user for their birth month and tells them their astrological sign:
let sign = prompt("Enter your birth month");

[1] {
  [2]:
    console.log("Your sign is Aquarius");
    [3]
  [4]:
    console.log("Your sign is Pisces");
    [5]
  [6]:
    console.log("Your sign is Aries");
    [7]
  [8]:
    console.log("Your sign is Taurus");
    [9]
  [10]:
    console.log("Your sign is Gemini");
    [11]
  [12]:
    console.log("Your sign is Cancer");
    [13]
  [14]:
    console.log("Your sign is Leo");
    [15]
  [16]:
    console.log("Your sign is Virgo");
    [17]
  [18]:
    console.log("Your sign is Libra");
    [19]
  [20]:
    console.log("Your sign is Scorpio");
    [21]
  [22]:
    console.log("Your sign is Sagittarius");
    [23]
  [24]:
    console.log("Your sign is Capricorn");
    [25]
  [26]:
    console.log("That is not a recognized month");
}
###
1~switch (sign)~switch(sign)
2~case "January"~case ("January")~case("January")
3~break;
4~case "February"~case ("February")~case("February")
5~break;
6~case "March"~case ("March")~case("March")
7~break;
8~case "April"~case ("April")~case("April")
9~break;
10~case "May"~case ("May")~case("May")
11~break;
12~case "June"~case ("June")~case("June")
13~break;
14~case "July"~case ("July")~case("July")
15~break;
16~case "August"~case ("August")~case("August")
17~break;
18~case "September"~case ("September")~case("September")
19~break;
20~case "October"~case ("October")~case("October")
21~break;
22~case "November"~case ("November")~case("November")
23~break;
24~case "December"~case ("December")~case("December")
25~break;
26~default
###
Check out a working example of this exercise:
Exercise 2-3~https://repl.it/@jmunger/CIS-156-Exercise-2-3-pozne
######